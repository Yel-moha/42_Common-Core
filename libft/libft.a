!<arch>
ft_isalpha.c/   0           0     0     644     1301      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 14:39:51 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/18 16:15:34 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

//#include <stdio.h>
int	ft_isalpha(int c)
{
	if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))
		return (1024);
	else
		return (0);
}
/*
 int main(void)
 {
    int verify;
    char c;
    c = 'A';

    verify = isalpha(c);
    if (verify == 1)
        printf(" Hai inserito una lettera dell'alfabeto");
    else
        printf(" il carattere inserito non e' parte dell'alfabeto ");
    return(0);
 }
 */

ft_isdigit.c/   0           0     0     644     1456      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 15:21:08 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/18 15:32:21 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (2048);
	else
		return (0);
}
/*
#include <stdio.h>
#include <ctype.h>
int main()
{
    int i;

    i = -1;
    while (i < 530)
    {
        if (ft_isdigit(i) != 0 && isdigit(i) == 0)
        {
            printf("Error with i = %d\n", i);
            return (1);
        }
        if (ft_isdigit(i) == 0 && isdigit(i) != 0)
        {
            printf("Error with i = %d\n", i);
            return (1);
        }
        i++;
    }
    printf("All tests passed successfully!\n");
    return (0);
}
*/
ft_isalnum.c/   0           0     0     644     1009      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 15:48:50 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/18 16:37:09 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int c)
{
	if (ft_isalpha(c) || ft_isdigit(c))
		return (8);
	else
		return (0);
}

ft_isascii.c/   0           0     0     644     1357      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 16:24:29 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/18 16:38:18 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_isascii(int c)
{
	if (c >= 0 && c <= 127)
		return (1);
	else
		return (0);
}
/* 
#include <stdio.h>
#include <ctype.h>
int main()
{
    int i;

    i = -1;
    while (i < 130)
    {
        if (ft_isascii(i) != isascii(i))
        {
            printf("Error at %d: ft_isascii = %d, isascii = %d\n", 
                i, ft_isascii(i), isascii(i));
            return (1);
        }
        i++;
    }
    printf("All tests passed!\n");
    return (0);
}
 */
ft_isprint.c/   0           0     0     644     982       `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 16:40:31 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/19 20:57:08 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

int	ft_isprint(int c)
{
	if (c >= 32 && c <= 126)
		return (16384);
	else
		return (0);
}
ft_strlen.c/    0           0     0     644     1010      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/18 16:55:02 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/19 20:32:10 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlen(const char *s)
{
	size_t	i;

	i = 0;
	while (s[i] != '\0')
		i++;
	return (i);
}
ft_memset.c/    0           0     0     644     1837      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/19 20:28:17 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/19 21:39:58 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memset(void *s, int c, size_t n)
{
	unsigned char	*ptr;

	ptr = (unsigned char *)s;
	while (n--)
		*ptr++ = (unsigned char)c;
	return (s);
}
/* 
#include <stdio.h>
#include <string.h>

int main(void)
{
    char str1[50] = "Hello World";
    char str2[50] = "Hello World";
    
    printf("Before ft_memset: %s\n", str1);
    printf("Before memset: %s\n", str2);
    
    ft_memset(str1, 'a', 22);
    memset(str2, 'a', 22);
    
    printf("After ft_memset: %s\n", str1);
    printf("After memset: %s\n", str2);
    
    // Test with different size and character
    char str3[50] = "Testing another case";
    char str4[50] = "Testing another case";
    
    printf("\nBefore ft_memset: %s\n", str3);
    printf("Before memset: %s\n", str4);
    
    ft_memset(str3, '#', 7);
    memset(str4, '#', 7);
    
    printf("After ft_memset: %s\n", str3);
    printf("After memset: %s\n", str4);
    
    return (0);
} */
ft_bzero.c/     0           0     0     644     2721      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/19 20:38:32 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/19 21:39:29 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	char	*p;

	p = s;
	while (n--)
		*p++ = '\0';
}
/* 
#include <stdio.h>

int main()
{
    // Test case 1-10: Different size arrays with characters
    char str1[10] = "Hello";
    char str2[10] = "Hello";
    printf("Test 1: Original string: %s\n", str1);
    bzero(str1, 5);
    ft_bzero(str2, 5);
    printf("After bzero(5): %s\nAfter ft_bzero(5): %s\n\n", str1, str2);

    // Test case 11-20: Arrays with numbers
    int nums1[5] = {1, 2, 3, 4, 5};
    int nums2[5] = {1, 2, 3, 4, 5};
	printf("Test 2: Before: %d %d %d %d %d\n", 
	nums1[0], nums1[1], nums1[2], nums1[3], nums1[4]);
    bzero(nums1, sizeof(int) * 3);
    ft_bzero(nums2, sizeof(int) * 3);
    printf("After bzero(12): %d %d %d %d %d\n", 
	nums1[0], nums1[1], nums1[2], nums1[3], nums1[4]);
    printf("After ft_bzero(12): %d %d %d %d %d\n\n", 
	nums2[0], nums2[1], nums2[2], nums2[3], nums2[4]);

    // Test case 21-30: Zero bytes
    char str3[5] = "Test";
    char str4[5] = "Test";
    printf("Test 3: Original string: %s\n", str3);
    bzero(str3, 0);
    ft_bzero(str4, 0);
    printf("After bzero(0): %s\nAfter ft_bzero(0): %s\n\n", str3 + 1, str4);

    // Test case 31-40: Single byte
    char c1 = 'A';
    char c2 = 'A';
    printf("Test 4: Original char: %c\n", c1);
    bzero(&c1, 1);
    ft_bzero(&c2, 1);
    printf("After bzero(1): %c\nAfter ft_bzero(1): %c\n\n", c1, c2);

    // Test case 41-50: Large array
    char large1[100];
    char large2[100];
    memset(large1, 'X', 100);
    memset(large2, 'X', 100);
    large1[99] = '\0';
    large2[99] = '\0';
    printf("Test 5: Original large string: %.10s...\n", large1);
    bzero(large1, 50);
    ft_bzero(large2, 50);
    printf("After bzero(50): %.10s...\nAfter 
	ft_bzero(50): %.10s...\n\n", large1, large2);

    return 0;
}

 */
ft_memcpy.c/    0           0     0     644     4561      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/19 21:42:01 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:08:42 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	char		*d;
	const char	*s;

	if (!dest && !src)
		return (NULL);
	d = (char *)dest;
	s = (const char *) src;
	while (n--)
		*d++ = *s++;
	return (dest);
}
/* 
#include <stdio.h>
#include <string.h>

int main()
{
    // Test case 1: Basic string copy
    char dest1[50] = "";
    char src1[] = "Hello, World!";
    printf("Test 1 - Original memcpy: %s\n", 
	(char *)memcpy(dest1, src1, strlen(src1) + 1));
    
    char dest1_ft[50] = "";
    printf("Test 1 - ft_memcpy: %s\n\n", 
	(char *)ft_memcpy(dest1_ft, src1, strlen(src1) + 1));

    // Test case 2: Copy with numbers
    int src2[] = {1, 2, 3, 4, 5};
    int dest2[5];
    memcpy(dest2, src2, sizeof(src2));
    printf("Test 2 - Original memcpy: ");
    for(int i = 0; i < 5; i++)
        printf("%d ", dest2[i]);
    printf("\n");

    int dest2_ft[5];
    ft_memcpy(dest2_ft, src2, sizeof(src2));
    printf("Test 2 - ft_memcpy: ");
    for(int i = 0; i < 5; i++)
        printf("%d ", dest2_ft[i]);
    printf("\n\n");

    // Test case 3: Empty string
    char dest3[10] = "Test";
    char src3[] = "";
    printf("Test 3 - Original memcpy: %s\n", (
	char *)memcpy(dest3, src3, 1));
    
    char dest3_ft[10] = "Test";
    printf("Test 3 - ft_memcpy: %s\n\n", (char 
	*)ft_memcpy(dest3_ft, src3, 1));

    // Test case 4: Single character
    char dest4[10];
    char src4 = 'X';
    memcpy(dest4, &src4, 1);
    printf("Test 4 - Original memcpy: %c\n", dest4[0]);

    char dest4_ft[10];
    ft_memcpy(dest4_ft, &src4, 1);
    printf("Test 4 - ft_memcpy: %c\n\n", dest4_ft[0]);

    // Test case 5: Float numbers
    float src5[] = {1.1, 2.2, 3.3, 4.4, 5.5};
    float dest5[5];
    memcpy(dest5, src5, sizeof(src5));
    printf("Test 5 - Original memcpy: ");
    for(int i = 0; i < 5; i++)
        printf("%.1f ", dest5[i]);
    printf("\n");

    float dest5_ft[5];
    ft_memcpy(dest5_ft, src5, sizeof(src5));
    printf("Test 5 - ft_memcpy: ");
    for(int i = 0; i < 5; i++)
        printf("%.1f ", dest5_ft[i]);
    printf("\n\n");

    // Test case 6: Overlapping memory (undefined behavior)
    char str6[] = "Hello, World!";
	
    printf("Test 6 - Original memcpy: %s\n", (char *)me
	mcpy(str6 + 1, str6, 5));
    
    char str6_ft[] = "Hello, World!";
    printf("Test 6 - ft_memcpy: %s\n\n", (char *)ft_mem
	cpy(str6_ft + 1, str6_ft, 5));

    // Test case 7: Zero bytes
    char dest7[] = "Test";
    char src7[] = "Hello";
    printf("Test 7 - Original memcpy: %s\n", (char *)me
	mcpy(dest7, src7, 0));
    
    char dest7_ft[] = "Test";
    printf("Test 7 - ft_memcpy: %s\n\n", (char *)ft_mem
	cpy(dest7_ft, src7, 0));

    // Test case 8: Large string
    char src8[1000];
    char dest8[1000];
    char dest8_ft[1000];
    memset(src8, 'A', 999);
    src8[999] = '\0';
    
    printf("Test 8 - Original memcpy: %.10s...\n", (char *)memc
	py(dest8, src8, 1000));
    printf("Test 8 - ft_memcpy: %.10s...\n\n", (char *)ft_mem
	cpy(dest8_ft, src8, 1000));

    // Test case 9: Special characters
    char src9[] = "!@#$%^&*()";
    char dest9[20];
    char dest9_ft[20];
    
    printf("Test 9 - Original memcpy: %s\n", (char *)memc
	py(dest9, src9, strlen(src9) + 1));
    printf("Test 9 - ft_memcpy: %s\n\n", (char *)ft_memc
	py(dest9_ft, src9, strlen(src9) + 1));

    // Test case 10: Unicode characters
    char src10[] = "Hello 世界";
    char dest10[20];
    char dest10_ft[20];
    
    printf("Test 10 - Original memcpy: %s\n", (char *)memcp
	y(dest10, src10, strlen(src10) + 1));
    printf("Test 10 - ft_memcpy: %s\n\n", (char *)ft_memc
	py(dest10_ft, src10, strlen(src10) + 1));

    return 0;
}
 */

ft_memmove.c/   0           0     0     644     3523      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/20 17:36:52 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:12:06 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	char		*d;
	const char	*s;

	if (!dest && !src)
		return (NULL);
	d = (char *)dest;
	s = (const char *)src;
	if (d < s)
		while (n--)
			*d++ = *s++;
	else
	{
		d = (char *)dest + n;
		s = (const char *)src + n;
		while (n--)
			*--d = *--s;
	}
	return (dest);
}
/* #include <stdio.h>
#include <string.h>

int main()
{
	char str1[] = "Hello World";
	char str2[20];
	char str3[20];
	
	// Test case 1: Basic copy
	ft_memmove(str2, str1, strlen(str1) + 1);
	memmove(str3, str1, strlen(str1) + 1);
	printf("Test 1: ft_memmove: %s\n", str2);
	printf("Test 1: memmove: %s\n", str3);
	
	// Test case 2: Overlapping memory (forward)
	char overlap1[] = "Hello World";
	char overlap2[] = "Hello World";
	ft_memmove(overlap1 + 6, overlap1, 5);
	memmove(overlap2 + 6, overlap2, 5);
	printf("Test 2: ft_memmove: %s\n", overlap1);
	printf("Test 2: memmove: %s\n", overlap2);
	
	// Test case 3: Overlapping memory (backward)
	char overlap3[] = "Hello World";
	char overlap4[] = "Hello World";
	ft_memmove(overlap3, overlap3 + 6, 5);
	memmove(overlap4, overlap4 + 6, 5);
	printf("Test 3: ft_memmove: %s\n", overlap3);
	printf("Test 3: memmove: %s\n", overlap4);
	
	// Test case 4: Zero bytes
	ft_memmove(str2, str1, 0);
	memmove(str3, str1, 0);
	printf("Test 4: ft_memmove: %s\n", str2);
	printf("Test 4: memmove: %s\n", str3);
	
	// Test case 5: One byte
	ft_memmove(str2, str1, 1);
	memmove(str3, str1, 1);
	printf("Test 5: ft_memmove: %.1s\n", str2);
	printf("Test 5: memmove: %.1s\n", str3);
	
	// Test case 6: Large data
	char large1[1000];
	char large2[1000];
	char large3[1000];
	memset(large1, 'A', 999);
	large1[999] = '\0';
	ft_memmove(large2, large1, 1000);
	memmove(large3, large1, 1000);
	printf("Test 6: ft_memmove: %.10s...\n", large2);
	printf("Test 6: memmove: %.10s...\n", large3);
	
	// Test case 7: NULL source
	char null_test1[10];
	char null_test2[10];
	ft_memmove(null_test1, NULL, 0);
	//memmove(null_test2, NULL, 0);
	printf("Test 7: ft_memmove completed\n");
	printf("Test 7: memmove completed\n");
	
	// Test case 8: Special characters
	char special1[] = "!@#$%^&*()";
	char special2[20];
	char special3[20];
	ft_memmove(special2, special1, strlen(special1) + 1);
	memmove(special3, special1, strlen(special1) + 1);
	printf("Test 8: ft_memmove: %s\n", special2);
	printf("Test 8: memmove: %s\n", special3);
	
	// Continue with more test cases...
	// Test cases 9-50 would follow similar patterns testing different:
	// - String lengths
	// - Character types
	// - Memory alignments
	// - Edge cases
	// - Boundary conditions
	
	return 0;
} */
ft_strlcpy.c/   0           0     0     644     1156      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/20 19:44:10 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/24 19:40:28 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t size)
{
	size_t	i;

	i = 0;
	if (size > 0)
	{
		while (i < (size - 1) && src[i] != '\0')
		{
			dst[i] = src[i];
			i++;
		}
		dst[i] = '\0';
	}
	while (src[i] != '\0')
		i++;
	return (i);
}
ft_strlcat.c/   0           0     0     644     1765      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/24 20:16:21 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/24 20:55:12 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcat(char *dst, const char *src, size_t size)
{
	size_t	i;
	size_t	j;
	size_t	k;

	i = 0;
	j = ft_strlen(dst);
	k = j;
	if (size <= ft_strlen(dst))
		return (ft_strlen(src) + size);
	while (src[i] != '\0' && j + 1 < size)
	{
		dst[j] = src[i];
		i++;
		j++;
	}
	dst[j] = '\0';
	return (ft_strlen(src) + k);
}
/* 
#include <stdio.h>
#include <bsd/string.h>


int main(void)
{
    char dst1[20] = "Hellooooo, ";
    char src1[] = "worhhhhhhhhhhhhhhhhhhhhhhhhhhhhld";
    char dst2[20] = "Hellooooo, ";
    char src2[] = "worhhhhhhhhhhhhhhhhhhhhhhhhhhhhld";
    
    size_t result1 = ft_strlcat(dst1, src1, sizeof(dst1));
    size_t result2 = strlcat(dst2, src2, sizeof(dst2));
    
    printf("Custom ft_strlcat: %s (result: %zu)\n", dst1, result1);
    printf("Original strlcat: %s (result: %zu)\n", dst2, result2);
    
    return 0;
}

 */
ft_toupper.c/   0           0     0     644     1421      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/23 17:17:52 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:13:35 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - 32);
	return (c);
}
/* 
#include <stdio.h>
#include <ctype.h>

int	ft_toupper(int c)
{
	if (c >= 'a' && c <= 'z')
		return (c - 32);
	return (c);
}

int	main(void)
{
	char test_chars[] = {'a', 'b', 'c', 'A', 'B', 'C', '1', '!', '\0'};
	int i = 0;

	while (test_chars[i])
	{
		printf("Original: %c, Custom toupper: %c, Standard toupper: %c\n",
			test_chars[i],
			toupper(test_chars[i]),
			toupper(test_chars[i]));
		i++;
	}
	return (0);
}
 */
ft_tolower.c/   0           0     0     644     1509      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/23 17:19:11 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/23 17:34:10 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_tolower(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (c + 32);
	return (c);
}

/* 
#include <stdio.h>
#include <ctype.h>

void compare_functions(int c) {
    int my_result = ft_tolower(c);
    int original_result = tolower(c); // A

    printf("Character: %c\n", c);
    printf("My function result: %c\n", my_result);
    printf("Original function result: %c\n", original_result);
}

int main() {
    char test_chars[] = {'A', 'B', 'C', 'a', 'b', '1', '!', 'Z'};
    int i;

    for (i = 0; i < sizeof(test_chars); i++) {
        compare_functions(test_chars[i]);
    }

    return 0;
}
 */
ft_strchr.c/    0           0     0     644     1105      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/23 17:36:35 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:41:11 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strchr(const char *s, int c)
{
	int	i;

	i = 0;
	while (s[i] != '\0')
	{
		if (s[i] == c)
			return ((char *)&s[i]);
		i++;
	}
	if (c == '\0')
		return ((char *)&s[i]);
	return (0);
}

ft_strrchr.c/   0           0     0     644     1819      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/23 17:36:11 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:22:38 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strrchr(const char *s, int c)
{
	int		i;
	char	*last_occurrence;

	i = 0;
	last_occurrence = NULL;
	while (s[i] != '\0')
	{
		if (s[i] == (char)c)
			last_occurrence = (char *)&s[i];
		i++;
	}
	if (c == '\0')
		return ((char *)&s[i]);
	return (last_occurrence);
}
/* 
#include <stdio.h>
#include <string.h>


int main(void)
{
    const char *str = "Hello, World!";
    int test_chars[] = {'o', 'W', 'l', 'z', '\0'};
    char *result_ft, *result_orig;
    int i;

    printf("Testing ft_strrchr against original strrchr:\n");
    for (i = 0; i < sizeof(test_chars) / sizeof(test_chars[0]); i++)
    {
        result_ft = ft_strrchr(str, test_chars[i]);
        result_orig = strrchr(str, test_chars[i]);

        printf("Character: '%c'\n", test_chars[i]);
        printf("ft_strrchr: %s\n", result_ft);

        printf("strrchr: %s\n", result_orig);
        printf("\n");
    }

    return 0;
}
 */
ft_strncmp.c/   0           0     0     644     1091      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/20 20:26:33 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:25:29 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	while (--n && *s1 && *s2 && *s1 == *s2)
	{
		s1++;
		s2++;
	}
	return (*(unsigned char *)s1 - *(unsigned char *)s2);
}

ft_memchr.c/    0           0     0     644     1857      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/24 19:15:49 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/24 19:23:36 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memchr(const void *s, int c, size_t n)
{
	size_t	i;
	char	*str;
	char	ch;

	i = 0;
	str = (char *)s;
	ch = (char)c;
	while (i < n)
	{
		if (str[i] == ch)
			return ((void *)&str[i]);
		i++;
	}
	return (0);
}
/* 

#include <stdio.h>
#include <string.h>

int main(void)
{
    const char *s = "Hello, Worllojosuibuid!";
    char c = 'd';
    size_t n = 13;

    void *result1 = ft_memchr(s, c, n);
    void *result2 = memchr(s, c, n);

    if (result1 == result2)
        printf("Both functions returned the same pointer.\n");
    else
        printf("Functions returned different pointers.\n");

    if (result1)
        printf("ft_memchr found '%c' at position: 
		%ld\n", c, (char *)result1 - s);
    else
        printf("ft_memchr did not find '%c'.\n", c);

    if (result2)
        printf("memchr found '%c' at position: %ld\n", c, (char *)result2 - s);
    else
        printf("memchr did not find '%c'.\n", c);

    return 0;
}
 */
ft_memcmp.c/    0           0     0     644     1244      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/24 19:24:50 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/24 19:55:52 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_memcmp(const void *s1, const void *s2, size_t n)
{
	size_t			i;
	unsigned char	*str1;
	unsigned char	*str2;

	str1 = (unsigned char *)s1;
	str2 = (unsigned char *)s2;
	i = 0;
	while (i < n)
	{
		if (str1[i] != str2[i])
		{
			if ((str1[i] - str2[i]) < 0)
				return (-1);
			else
				return (1);
		}
		i++;
	}
	return (0);
}
ft_strnstr.c/   0           0     0     644     1559      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/20 19:50:10 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/23 18:40:39 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strnstr(const char *big, const char *little, size_t len)
{
	size_t	j;
	size_t	i;

	if (*little == '\0')
		return ((char *)big);
	i = 0;
	while (big[i] && i < len)
	{
		j = 0;
		while (big[i + j] == little[j] && (i + j) < len)
		{
			j++;
			if (little[j] == '\0')
				return ((char *)&big[i]);
		}
		i++;
	}
	return (NULL);
}
/* #include <stdio.h>
#include <string.h>

int main()
{
    char *big = "Hello, world!";
    char *little = "";
    size_t len = 15;
	char *result = ft_strnstr(big, little, len);
	if (result != NULL)
	{
		printf("Substring found: %s\n", result);
	}
	else
	{
		printf("Substring not found.\n");
	}
	return 0;
} */
ft_atoi.c/      0           0     0     644     1896      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/24 20:56:18 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:39:26 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_atoi(const char *str)
{
	int	i;
	int	num;
	int	sign;

	sign = 1;
	i = 0;
	num = 0;
	while (str[i] == ' ' || str[i] == '\t' || str[i] == '\n' || \
			str[i] == '\v' || str[i] == '\f' || str[i] == '\r')
		i++;
	if (str[i] == '+' || str[i] == '-')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		num = ((str[i] - 48) + (num * 10));
		i++;
	}
	return (num * sign);
}
/* 
#include <stdio.h>


int main(void)
{
	const char *tests[20] = {
		"123", "-123", "+123", "   123", "0", 
		"999999", "   -999999", "   +999999", 
		"abc123", "123abc", "   +abc", "   -abc", 
		"   +0", "   -0", "   +1", "   -1", 
		"   +2147483647", "   -2147483648", 
		"2147483648", "-2147483649", "++++---12456h64"
	};
	int i;
	for (i = 0; i < 20; i++)
	{
		int my_res = ft_atoi(tests[i]);
		int original_res = atoi(tests[i]);
		printf("Test %d: Input: '%s' | My atoi: %d | Original atoi: %d\n", 
			i + 1, tests[i], my_res, original_res);
	}
	return (0);
}
 */ft_substr.c/    0           0     0     644     2683      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/26 22:06:39 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/27 00:01:43 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char	*nstr;
	size_t	i;

	i = 0;
	if (start >= ft_strlen(s))
		return (ft_strdup(""));
	nstr = ft_calloc(len + 1, sizeof(char));
	if (nstr == NULL)
		return (NULL);
	while (i < len && s[start + i] != '\0')
	{
		nstr[i] = s[start + i];
		i++;
	}
	nstr[i] = '\0';
	return (nstr);
}
/* 

void test_ft_substr(char *s, unsigned int start, size_t len)
{
    char *result;

    printf("Input string: \"%s\", start: %u, len: %zu\n", s, start, len);
    result = ft_substr(s, start, len);
    if (result != NULL)
        printf("ft_substr result: \"%s\"\n", result);
    else
        printf("ft_substr result: NULL\n");

    free(result);
}
void test_ft_substr_extended(void)
{
    // Test with special characters
    test_ft_substr("Hello\n\tWorld!", 5, 3);  // "\n\t"
    test_ft_substr("Hello\0World", 0, 10);    // "Hello"
    
    // Test with non-ASCII characters
    test_ft_substr("héllø wørld", 2, 4);      // "llø "
    
    // Test with very large len
    test_ft_substr("small", 0, SIZE_MAX);     // "small"
    
    // Test with multiple spaces
    test_ft_substr("   spaces   ", 3, 6);     // "spaces"
    
    // Test with single character
    test_ft_substr("X", 0, 1);                // "X"
    
    // Test with overlapping len
    test_ft_substr("12345", 2, 10);           // "345"
    
    // Test with exact string length
    test_ft_substr("test", 0, 4);             // "test"
    
    // Test with numbers and symbols
    test_ft_substr("123!@#$%^", 3, 4);        // "!@#$"
}

int main(void)
{
    // Original tests
    test_ft_substr("Hello, world!", 0, 5);
    test_ft_substr("Hello, world!", 7, 5);
    
    // New extended tests
    test_ft_substr_extended();
    
    return 0;
}
 */
ft_strjoin.c/   0           0     0     644     2165      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/27 21:20:07 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/27 23:17:01 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	size_t	i;
	size_t	j;
	char	*join;

	i = -1;
	j = -1;
	join = ft_calloc((ft_strlen(s1) + ft_strlen(s2) + 1), sizeof(char));
	if (!join)
		return (NULL);
	while (s1[++i])
	{
		join[i] = s1[i];
	}
	while (s2[++j])
	{
		join[j + i] = s2[j];
	}
	return (join);
}
/* 
 
#include <stdio.h>
#include "libft.h"

int main(void)
{
    char *result;

    // Test 1: Concatenazione di due stringhe normali
    char s1[] = "Hello, ";
    char s2[] = "World!";
    result = ft_strjoin(s1, s2);
    printf("Test 1: '%s' + '%s' = '%s'\n", s1, s2, result);
    free(result);

    // Test 2: Una stringa vuota
    char s3[] = "";
    char s4[] = "Test";
    result = ft_strjoin(s3, s4);
    printf("Test 2: '%s' + '%s' = '%s'\n", s3, s4, result);
    free(result);

    // Test 3: Entrambe le stringhe vuote
    char s5[] = "";
    char s6[] = "";
    result = ft_strjoin(s5, s6);
    printf("Test 3: '%s' + '%s' = '%s'\n", s5, s6, result);
    free(result);

    // Test 4: Stringa lunga
    char s7[] = "This is a very long string, ";
    char s8[] = "and this is another long string.";
    result = ft_strjoin(s7, s8);
    printf("Test 4: '%s' + '%s' = '%s'\n", s7, s8, result);
    free(result);

    return 0;
}
 */
ft_strtrim.c/   0           0     0     644     2685      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/27 23:18:16 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 19:13:56 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strtrim(char const *s1, char const *set)
{
	char	*nstr;
	size_t	i;
	size_t	j;

	j = 0;
	i = ft_strlen(s1);
	while (ft_strchr(set, s1[i - 1]) != 0 && i > j)
		i--;
	while (ft_strchr(set, s1[j]) != 0 && j < i)
		j++;
	nstr = ft_calloc((i - j) + 1, sizeof(char));
	if (!nstr)
		return (NULL);
	nstr = ft_substr(s1, j, (i - j));
	return (nstr);
}
/* 
int main(void)
{
    char *result;
    // Test 1: Trim di caratteri presenti su entrambi i lati
    char s1[] = "!!Hello, World!!!";
    char set[] = "!!!!";
	 
    result = ft_strtrim(s1, set);
    printf("Test 2: '%s' trimmed by '%s' -> '%s'\n", s1, set, result);
    free(result);

    // Test 2: Trim di spazi bianchi
    char s2[] = "   Hello, World   ";
    char set2[] = " ";
    result = ft_strtrim(s2, set2);
    printf("Test 2: '%s' trimmed by '%s' -> '%s'\n", s2, set2, result);
    free(result);

    // Test 3: Nessun carattere da rimuovere
    char s3[] = "xxxxxHello, Worldyyyyyyyyyyy";
    char set3[] = "xyz";
    result = ft_strtrim(s3, set3);
    printf("Test 3: '%s' trimmed by '%s' -> '%s'\n", s3, set3, result);
    free(result);

    // Test 4: Stringa vuota
    char s4[10];
    char set4[] = " ";
    result = ft_strtrim(s4, set4);
    printf("Test 4: '%s' trimmed by '%s' -> '%s'\n", s4, set4, result);
    free(result);

    // Test 5: Trim di una stringa completamente rimossa
    char s5[] = "aaaaaa";
    char set5[] = "a";
    result = ft_strtrim(s5, set5);
    printf("Test 5: '%s' trimmed by '%s' -> '%s'\n", s5, set5, result);
    free(result);

    // Test 6: Stringa da trim e set uguali
    char s6[] = "abc";
    char set6[] = "abc";
    result = ft_strtrim(s6, set6);
    printf("Test 6: '%s' trimmed by '%s' -> '%s'\n", s6, set6, result);
    free(result);

    return 0;
}
 */
ft_split.c/     0           0     0     644     2374      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/29 16:58:42 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 19:56:42 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static int	count_words(const char *s, char c)
{
	int	count;

	count = 0;
	while (*s)
	{
		while (*s == c)
			s++;
		if (*s != '\0')
		{
			count++;
			while (*s && *s != c)
				s++;
		}
	}
	return (count);
}

static char	**free_split(char **split)
{
	int	i;

	i = 0;
	while (split[i])
		free(split[i++]);
	free(split);
	return (NULL);
}

static char	**if_aux(char const *s, char c, char **result)
{
	int	i;
	int	j;
	int	start;

	i = 0;
	j = 0;
	while (s[i])
	{
		while (s[i] == c)
			i++;
		start = i;
		while (s[i] && s[i] != c)
			i++;
		if (i > start)
		{
			result[j] = ft_substr(s, start, i - start);
			if (!result[j])
				return (free_split(result));
			j++;
		}
	}
	return (result);
}

char	**ft_split(char const *s, char c)
{
	char	**result;

	if (!s)
		return (NULL);
	result = ft_calloc(count_words(s, c) + 1, sizeof(char *));
	if (!result)
		return (NULL);
	result = if_aux(s, c, result);
	return (result);
}

int main(void)
{
    char *str = "      split       this for   me  !       ";
    char **result;
    int i;

    result = ft_split(str, ' '); // Usa lo spazio come delimitatore

    if (result != NULL)
    {
        i = 0;
        while (result[i] != NULL)
        {
            printf("Word %d: '%s'\n", i, result[i]);
            free(result[i]); // Libera ogni parola
            i++;
        }
        free(result); // Libera l'array di puntatori
    }
    else
    {
        printf("ft_split returned NULL.\n");
    }

    return 0;
}
ft_calloc.c/    0           0     0     644     1157      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/26 00:34:47 by yel-moha          #+#    #+#             */
/*   Updated: 2024/11/26 23:41:12 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_calloc(size_t nmemb, size_t size)
{
	size_t	dim;
	void	*ptr;

	if (nmemb != 0 && size > SIZE_MAX / nmemb)
		return (NULL);
	dim = size * nmemb;
	ptr = malloc(dim);
	if (ptr == NULL)
		return (ptr);
	ft_bzero(ptr, dim);
	return (ptr);
}

ft_strdup.c/    0           0     0     644     1107      `
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: yel-moha <yel-moha@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/26 21:02:58 by yel-moha          #+#    #+#             */
/*   Updated: 2024/12/01 17:46:11 by yel-moha         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strdup(const char *s1)
{
	char	*str;
	size_t	len;

	len = ft_strlen(s1);
	str = ft_calloc(1, len + 1);
	if (str == NULL)
		return (NULL);
	ft_strlcpy(str, s1, len + 1);
	return (str);
}

